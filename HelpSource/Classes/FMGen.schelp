TITLE:: FMGen
summary:: Generate, audition, and save FM SynthDefs using random procedures.
categories:: Extensions
related:: Classes/Quarks

DESCRIPTION::
FMGen is a class to generate n number of FM SynthDefs stored in SuperCollider code (rather than def file format.) FM configurations include multimodulator, multicarrier, and parallel. The SynthDefs are generated pseudorandomly with class arguments for specifying number, type, etc. The original code inspiration for this Quark is the James McCartney example file '100 FM Synths.scd' included in the SuperCollider distribution examples.

CLASSMETHODS::

METHOD:: new
(describe method here)

ARGUMENT:: arga
(describe argument here)

ARGUMENT:: argb
(describe argument here)

returns:: (describe returnvalue here)

INSTANCEMETHODS::

METHOD:: generate
(describe method here)

ARGUMENT:: arga
(describe argument here)

ARGUMENT:: argb
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: play
(describe method here)

ARGUMENT:: arga
(describe argument here)

ARGUMENT:: argb
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: defs
(describe method here)

ARGUMENT:: arga
(describe argument here)

ARGUMENT:: argb
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: save
(describe method here)

ARGUMENT:: arga
(describe argument here)

ARGUMENT:: argb
(describe argument here)

returns:: (describe returnvalue here)

EXAMPLES::

code::

// fire it up!
f = FMGen(10, fm_type: 2);

// Print the definition for a synth
f.defs(\fmgen_b_1);

// Print all defs from the current run
f.defs(all: 1);

// Hear all the synths in order
f.play(\all)

// Specifiy root note, scale, and range in number of octaves
f.play(\all, 15, 48, \minor, 2);

// Hear only one synth
f.play(\fmgen_b_4, 10, 60, \minor, 2);

// Save a synthdef you like with an optional description.
f.save(\fmgen_b_4, "A dirty synth bass: best around MIDI note 30");
