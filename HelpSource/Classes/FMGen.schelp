TITLE:: FMGen
summary:: Generate, audition, and save FM SynthDefs using random procedures.
categories:: Extensions
related:: Classes/Quarks

DESCRIPTION::
FMGen is a class to generate n number of FM SynthDefs stored in SuperCollider code (rather than def file format.) FM configurations are as follows:

Category A: Three (3) Summed (parallel) CM pairs.
Category B: Two (2) Summed modulator->modulator->carrier chains. (Series Multi-modulator FM)
Category C: Two (2) Summed modulator-+->carrier pairs. (Parellel Multi-carrier FM)
					                           |
					                           +->carrier 

The SynthDefs are generated pseudorandomly with class arguments for specifying number, type, etc. Files with human-readable SuperCollider code are written to the fmgen-defs folder in the directory with the FMGen.sc file. The original code inspiration for this Quark is the James McCartney example file '100 FM Synths.scd' included in the SuperCollider distribution examples.

CLASSMETHODS::

METHOD:: new
Creates a new instance of FMGen, generates the num_defs number of SynthDefs, adds them, and makes them available for auditioning, saving, etc. (See below instance methods.)

ARGUMENT:: num_defs
The total number of random FM SynthDefs to generate. Ex. 10, 25, or 47. 

ARGUMENT:: max_attack
Used internally as the high value for the percussive envelope attack argument. This is the maximum attack possible.

ARGUMENT:: max_release
Used internally as the high value for the percussive envelope release argument. This is the maximum attack possible.

ARGUMENT:: fm_type
0 will randomly select from the three types of configuration. 1 will choose only Category A, 2 Category B, and 3 Category C.

returns:: An FMGen.

INSTANCEMETHODS::

METHOD:: generate
Called by "new", generate can be run on an instance of FMGen to generate a new batch of random FM Synths. The Dictionary storing the SynthDefs will be cleared out, however, the files written (containing all SynthDefs generated remain.)

ARGUMENT:: num_defs
The total number of random FM SynthDefs to generate. Ex. 10, 25, or 47. 

ARGUMENT:: max_attack
Used internally as the high value for the percussive envelope attack argument. This is the maximum attack possible.

ARGUMENT:: max_release
Used internally as the high value for the percussive envelope release argument. This is the maximum attack possible.

ARGUMENT:: fm_type
0 will randomly select from the three types of configuration. 1 will choose only Category A, 2 Category B, and 3 Category C.

returns:: An FMGen.

METHOD:: play
(describe method here)

ARGUMENT:: which
(describe argument here)

ARGUMENT:: num_notes
(describe argument here)

ARGUMENT:: root_note
(describe argument here)

ARGUMENT:: scale
(describe argument here)

ARGUMENT:: num_octaves
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: defs
(describe method here)

ARGUMENT:: arga
(describe argument here)

ARGUMENT:: argb
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: save
(describe method here)

ARGUMENT:: arga
(describe argument here)

ARGUMENT:: argb
(describe argument here)

returns:: (describe returnvalue here)

EXAMPLES::

code::

// fire it up!
f = FMGen(10, fm_type: 2);

// Print the definition for a synth
f.defs(\fmgen_b_1);

// Print all defs from the current run
f.defs(all: 1);

// Hear all the synths in order
f.play(\all)

// Specifiy root note, scale, and range in number of octaves
f.play(\all, 15, 48, \minor, 2);

// Hear only one synth
f.play(\fmgen_b_4, 10, 60, \minor, 2);

// Save a synthdef you like with an optional description.
f.save(\fmgen_b_4, "A dirty synth bass: best around MIDI note 30");
::
